plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
}

group = 'com.interview.test'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

ext {
    testngVersion = '7.8.0'
    restAssuredVersion = '5.3.2'
    jacksonVersion = '2.15.2'
    allureVersion = '2.24.0'
    slf4jVersion = '2.0.7'
    logbackVersion = '1.4.11'
    aspectjVersion = '1.9.19'
}

dependencies {
    // TestNG
    implementation "org.testng:testng:${testngVersion}"

    // REST Assured
    implementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    implementation "io.rest-assured:json-schema-validator:${restAssuredVersion}"

    // Jackson for JSON processing
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    // Allure
    implementation "io.qameta.allure:allure-testng:${allureVersion}"
    implementation "io.qameta.allure:allure-rest-assured:${allureVersion}"

    // Logging
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"

    // AspectJ for Allure
    implementation "org.aspectj:aspectjweaver:${aspectjVersion}"
}

allure {
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            testng {
                adapterVersion.set(allureVersion)
            }
        }
    }
}


tasks.register('spribeTests', Test) {
    useTestNG() {
        parallel = 'methods'
        threadCount = findProperty('test.thread.count') ?: '3' as int

        // Set system properties at execution time
        doFirst {
            systemProperty 'allure.results.directory', "${layout.buildDirectory.get()}/allure-results"
            systemProperty 'test.environment', findProperty('test.environment') ?: 'TEST'
            systemProperty 'app.base.url', findProperty('app.base.url') ?: 'http://3.68.165.45'
            systemProperty 'test.thread.count', findProperty('test.thread.count') ?: '3'
        }

        // Add all listeners from testng.xml
        listeners << 'io.qameta.allure.testng.AllureTestNg'
        listeners << 'com.interview.test.listeners.TestExecutionListener'
        listeners << 'com.interview.test.listeners.AllureEnvironmentWriter'

    }

    // JVM arguments
    jvmArgs "-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains('aspectjweaver') }}"
    jvmArgs '-Xmx1024m'

    // Test output
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    // Generate reports
    reports {
        html.required = true
        junitXml.required = true
    }

    // Fail fast
    failFast = false
}

tasks.register('debugTest', Test) {
    group = 'verification'
    description = 'Run a single test method for debugging purposes'

    useTestNG {
        // Single thread for debugging to avoid concurrency issues
        parallel = 'none'
        threadCount = 1

        // Add all listeners from testng.xml
        listeners << 'io.qameta.allure.testng.AllureTestNg'
        listeners << 'com.interview.test.listeners.TestExecutionListener'
        listeners << 'com.interview.test.listeners.AllureEnvironmentWriter'

        // Configure test selection
        if (project.hasProperty('testClass')) {
            includeGroups = []  // Clear groups to run specific test
            include "**/${project.property('testClass')}.class"
        }

        if (project.hasProperty('testMethod')) {
            // Use TestNG method selection
            useDefaultListeners = true
        }
    }

    // Enhanced logging for debugging
    testLogging {
        showStandardStreams = true
        events "STARTED", "PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"
        exceptionFormat = "full"
        showExceptions = true
        showCauses = true
        showStackTraces = true

        // Show test details
        info.events = ["FAILED", "SKIPPED"]
        debug.events = ["STARTED", "PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"]
    }

    // Debug-specific JVM arguments
    jvmArgs "-Xdebug",
            "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005",
            "-Dtest.debug=true",
            "-Dtest.logging.enabled=true",
            "-Dlogback.configurationFile=src/test/resources/logback-debug.xml"

    // Always run (don't use cache)
    outputs.upToDateWhen { false }

    // Set system properties for debugging
    systemProperty 'test.environment', findProperty('test.environment') ?: 'TEST'
    systemProperty 'app.base.url', findProperty('app.base.url') ?: 'http://3.68.165.45'
    systemProperty 'test.thread.count', '1'
    systemProperty 'test.debug.mode', 'true'
    systemProperty 'allure.results.directory', "${layout.buildDirectory.get()}/debug-allure-results"

    // Configure test selection via command line
    if (project.hasProperty('tests')) {
        filter {
            includeTestsMatching project.property('tests')
        }
    }

    // Increase timeouts for debugging
    systemProperty 'api.request.timeout', '120000'  // 2 minutes
    systemProperty 'api.connection.timeout', '60000'  // 1 minute

    // Debug reporting
    reports {
        html.destination = file("${layout.buildDirectory.get()}/reports/debug-tests")
        junitXml.destination = file("${layout.buildDirectory.get()}/debug-test-results")
    }

    // Print debug information
    doFirst {
        println "=== DEBUG TEST EXECUTION ==="
        println "Test Class: ${project.findProperty('testClass') ?: 'Not specified'}"
        println "Test Method: ${project.findProperty('testMethod') ?: 'Not specified'}"
        println "Test Pattern: ${project.findProperty('tests') ?: 'Not specified'}"
        println "Base URL: ${systemProperties['app.base.url']}"
        println "Environment: ${systemProperties['test.environment']}"
        println "Debug Port: 5005 (for remote debugging)"
        println "Listeners: AllureTestNg, TestExecutionListener, AllureEnvironmentWriter"
        println "=========================="
    }

    doLast {
        println "=== DEBUG TEST COMPLETED ==="
//        println "Reports: ${build/reports/allure-report/allureReport}/index.html"
        println "Allure Results: ${layout.buildDirectory.get()}/debug-allure-results"
        println "=========================="
    }
}


// Clean Allure results
tasks.register('cleanAllureResults', Delete) {
    delete layout.buildDirectory.dir("allure-results")
}

clean.dependsOn cleanAllureResults

// Generate Allure report
tasks.register('generateAllureReport', Exec) {
    dependsOn test
    commandLine 'allure', 'generate', "${layout.buildDirectory.get()}/allure-results", '--clean', '--output', "${layout.buildDirectory.get()}/reports/allure"
    doLast {
        println "Allure report generated at: ${layout.buildDirectory.get()}/reports/allure/index.html"
    }
}

// Serve Allure report
tasks.register('runAllureServe', Exec) {
    dependsOn test
    commandLine 'allure', 'serve', "${layout.buildDirectory.get()}/allure-results"
}

tasks.withType(Test)*.finalizedBy 'allureReport'